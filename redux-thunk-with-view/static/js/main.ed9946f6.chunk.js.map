{"version":3,"sources":["middleWares/logger.ts","slice.ts","viewStates.ts","App.tsx","connectViewStates.tsx","actions.ts","serviceWorker.ts","store.ts","index.tsx"],"names":["logs","next","action","console","log","push","type","createLoggerMiddleWare","logger","getLog","counter","createSlice","name","initialState","reducers","increment","state","decrement","viewStates","layoutBgColor","listeners","s","this","forEach","l","listener","index","indexOf","splice","Comp","Layout","styled","div","Flex","Input","input","Button","button","BorderBox","Events","connectViewStates","props","dispatch","useDispatch","useSelector","store","useEffect","document","body","style","backgroundColor","disabled","value","onClick","getState","a","setState","counterSlice","actions","Math","random","length","map","key","slice","reverse","useState","handleUpdate","subscribe","Boolean","window","location","hostname","match","reducer","combineReducers","createStore","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed9946f6.chunk.js","sourcesContent":["import { Middleware } from \"redux\";\n\ntype Logger = Middleware;\n\ntype GetLog = () => string[];\n\nfunction createLoggerMiddleWare(): [Logger, GetLog] {\n  const logs: string[] = [];\n\n  const logger: Middleware = () => next => action => {\n    console.log('dispatching', action)\n    logs.push(action.type);\n    let result = next(action)\n    return result\n  }\n\n  const getLog: GetLog = () => logs;\n\n  return [logger, getLog];\n}\n\nexport const [logger, getLog] = createLoggerMiddleWare();\n\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const counter = createSlice({\n  name: 'counter',\n  initialState: 0 as number,\n  reducers: {\n    increment: state => state + 1,\n    decrement: state => state - 1,\n  }\n})\n","export class ViewStates {\n  private state = {\n    layoutBgColor: 0,\n  }\n\n  private listeners: Array<()=>void> = [];\n\n  setState(s: object) {\n    this.state = {\n      ...this.state,\n      ...s,\n    };\n    this.listeners.forEach(l => l());\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  subscribe(listener: () => void) {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener)\n      this.listeners.splice(index, 1)\n    }\n  }\n}\n\nconst viewStates = new ViewStates();\n\nexport default viewStates;\n","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from './store';\nimport { getLog } from './middleWares/logger';\nimport styled from 'styled-components';\nimport { increase, decrease, changeColor } from './actions';\nimport { connectViewStates } from './connectViewStates';\n\nconst Layout = styled.div`\n  display: flex;\n  max-width: 900px;\n  flex-direction: column;\n  margin: 50px auto;\n  padding: 20px;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  > * {\n    margin-right: 20px;\n  }\n`;\n\nconst Input = styled.input`\n  background: none;\n  height: 36px;\n  padding: 0 10px;\n  font-size: 24px;\n  text-align: right;\n  width: 100px;\n  border: 1px solid #555;\n  border-radius: 5px;\n`;\n\nconst Button = styled.button`\n  background: none;\n  height: 36px;\n  min-width: 36px;\n  color: #000;\n  font-size: 20px;\n  border: 1px solid #555;\n  border-radius: 5px;\n  padding: 5px 10px;\n  outline-color: #555;\n  outline-width: 2px;\n`;\n\nconst BorderBox = styled.div`\n  border: 1px solid #555;\n  border-radius: 5px;\n  padding: 5px 20px;\n  min-width: 200px;\n  margin-top: 10px;\n`\n\nconst Events = styled.div`\n  max-height: 50vh;\n  overflow: scroll;\n  > * {\n    margin-bottom: 10px;\n  }\n  td {\n    padding-bottom: 5px;\n    padding-right: 10px;\n    min-width: 30px;\n  }\n`;\n\nconst App = (props: any) => {\n  const dispatch = useDispatch();\n  const logs = getLog();\n  const counter = useSelector((store: StoreState) => store.counter);\n  const {\n    viewStates: {\n      layoutBgColor,\n    }\n  } = props;\n\n  useEffect(() => {\n    document.body.style.backgroundColor =`hsl(${layoutBgColor}, 100%, 95%)`\n  }, [layoutBgColor])\n\n  return (\n    <Layout>\n      <Flex>\n        <Input\n          disabled\n          value={counter}\n        />\n        <Button onClick={() => dispatch(increase())}>+</Button>\n        <Button onClick={() => dispatch(decrease())}>-</Button>\n        <Button onClick={() => dispatch(changeColor())}>RandomColor</Button>\n      </Flex>\n      <BorderBox>\n        <p>Dispatch Events: </p>\n        { logs.length > 0 && (\n          <Events>\n            <table>\n              <tbody>\n                {logs.map((log, index) => (\n                  <tr key={index}>\n                    <td>{index}: </td>\n                    <td>{log}</td>\n                  </tr>\n                )).slice(0).reverse()}\n              </tbody>\n            </table>\n          </Events>\n        )}\n      </BorderBox>\n    </Layout>\n  );\n};\n\nexport default connectViewStates(App);\n","import React, { useEffect, useState } from 'react';\nimport viewStates from './viewStates';\n\nexport const connectViewStates = <P extends object>(Comp: React.FunctionComponent<P>) => (props: P) => {\n  const [,setState] = useState();\n  const handleUpdate = () => setState({});\n\n  useEffect(() => {\n    const unsubscribe = viewStates.subscribe(handleUpdate);\n    return unsubscribe;\n  }, [])\n  return <Comp {...props} viewStates={viewStates.getState()}/>;\n}\n\n","import { counter as counterSlice } from './slice';\nimport { Dispatch } from 'redux';\nimport { StoreState } from './store';\nimport { ViewStates } from './viewStates';\n\nexport const increase = () => (\n  async (dispatch: Dispatch, getState: () => StoreState, viewStates: ViewStates) => {\n    viewStates.setState({ layoutBgColor: getState().counter * 10 });\n    dispatch(counterSlice.actions.increment())\n  }\n);\n\nexport const decrease = () => (\n  async (dispatch: Dispatch, getState: () => StoreState, viewStates: ViewStates) => {\n    viewStates.setState({ layoutBgColor: getState().counter * 10 });\n    dispatch(counterSlice.actions.decrement())\n  }\n);\n\nexport const changeColor = () => (\n  async (dispatch: Dispatch, getState: () => StoreState, viewStates: ViewStates) => {\n    viewStates.setState({ layoutBgColor: Math.random() * 255 });\n  }\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { counter } from './slice';\nimport thunk from 'redux-thunk';\nimport { logger } from './middleWares/logger';\nimport viewStates from './viewStates';\n\nconst reducer = combineReducers({\n  counter: counter.reducer,\n})\n\nexport type StoreState = {\n  counter: number;\n};\n\nexport const store = createStore<StoreState, any, {}, {}>(\n  reducer,\n  applyMiddleware(thunk.withExtraArgument(viewStates), logger),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}