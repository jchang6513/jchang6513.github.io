{"version":3,"sources":["components/keyboard.tsx","index.tsx"],"names":["Keyboard","props","keyPressing","pressedKeys","keyMap","ansi104","unitWidth","value","concat","maxKeyWidth","currentRowWidth","useEffect","document","getElementById","style","width","react_default","a","createElement","id","map","row","className","height","key","w","h","x","legend","keyCode","keyWidth","keyHeight","includes","split","k","rootElement","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setKeyPressing","_useState3","_useState4","keyPress","setKeyPress","_useState5","_useState6","setPressedKeys","pushPressedKeys","e","code","toConsumableArray","addEventListener","removeEventListener","length","components_keyboard"],"mappings":"0vHAoFeA,EAhEE,SAACC,GAAyB,IAEvCC,EAEED,EAFFC,YACAC,EACEF,EADFE,YAEIC,EAAiBC,EAEjBC,EAAY,SAACC,GAAD,cAAAC,OAA2BD,EAA3B,OAAAC,OADL,OACK,MAEdC,EAAc,EACdC,EAAkB,EAMtB,OAJAC,oBAAU,WACPC,SAASC,eAAe,YAAoBC,MAAMC,MAAnD,QAAAP,OAAmEC,EAAnE,OAAAD,OAPW,OAOX,MACC,CAACC,IAGFO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAEJf,EAAOgB,IAAI,SAAAC,GAKT,OAJKZ,EAAcC,IACjBD,EAAcC,GAEhBA,EAAkB,EAEhBM,EAAAC,EAAAC,cAAA,OAAKI,UAAU,MAAMR,MAAO,CAACS,OAnB1B,SAqBCF,EAAID,IAAI,SAAAI,GAAO,IAEXC,EACED,EADFC,EAAGC,EACDF,EADCE,EAAGC,EACJH,EADIG,EAAGC,EACPJ,EADOI,OAAQC,EACfL,EADeK,QAEbC,EAAWL,GAAK,EAChBM,EAAYL,GAAK,EACvB,OAAIC,GACFjB,GAAmBiB,EACZX,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAAYR,MAAO,CAACS,OA7B/C,OA6B6DR,MAAOT,EAAUqB,OAGvEC,GAAUC,GACZnB,GAAmBoB,EAEjBd,EAAAC,EAAAC,cAAA,OACEI,UAAS,OAAAd,OAASqB,EAAT,KAAArB,OAAoBL,EAAY6B,SAASH,IAAY,UAArD,KAAArB,OAAkEN,IAAgB2B,GAAW,YACtGf,MAAO,CACLS,OAAQjB,EAAUyB,GAClBhB,MAAOT,EAAUwB,KAGnBd,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACXM,EAAOK,MAAM,MAAMb,IAAI,SAAAc,GAAC,OAAIlB,EAAAC,EAAAC,cAAA,SAAIgB,EAAElB,EAAAC,EAAAC,cAAA,sBAX5C,SCXZiB,EAAcvB,SAASC,eAAe,QAC5CuB,IAASC,OAAOrB,EAAAC,EAAAC,cA1CJ,WAAM,IAAAoB,EACsBC,mBAAiB,IADvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTpC,EADSsC,EAAA,GACIG,EADJH,EAAA,GAAAI,EAEgBL,mBAAiB,IAFjCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAETE,EAFSD,EAAA,GAECE,EAFDF,EAAA,GAAAG,EAGsBT,mBAAmB,IAHzCU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGT7C,EAHS8C,EAAA,GAGIC,EAHJD,EAAA,GAKVE,EAAkB,SAACC,GAAqB,IACpCC,EAAcD,EAAdC,KAAM7B,EAAQ4B,EAAR5B,IACduB,EAAYvB,GACPrB,EAAY6B,SAASqB,IACxBH,EAAc,GAAA1C,OAAAiC,OAAAa,EAAA,EAAAb,CAAKtC,GAAL,CAAkBkD,MAkBpC,OAdA1C,oBAAU,WACRC,SAAS2C,iBAAiB,UAAW,SAACH,GACpCT,EAAeS,EAAEC,QAEnBzC,SAAS2C,iBAAiB,QAAS,WACjCZ,EAAe,OAEhB,IAEHhC,oBAAU,WAER,OADAC,SAAS2C,iBAAiB,UAAWJ,GAC9B,kBAAMvC,SAAS4C,oBAAoB,UAAWL,KACpD,CAAChD,EAAYsD,SAGdzC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,+BACoBF,EAAAC,EAAAC,cAAA,YAAO4B,IAE3B9B,EAAAC,EAAAC,cAACwC,EAAD,CACExD,YAAaA,EACbC,YAAaA,MAOL,MAASgC","file":"static/js/main.afa3f54d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../assets/scss/keyboard.scss';\n\nimport ansi104 from '../assets/layout/ANSI104.json';\n\ntype TKey = {\n  w?: number;\n  h?: number;\n  x?: number;\n  y?: number;\n  legend?: string;\n  keyCode?: string;\n};\ntype KeyRow = TKey[];\ntype KeyMap = KeyRow[];\n\ntype KeyboardProps = {\n  keyPressing: string;\n  pressedKeys: string[];\n}\nconst Keyboard = (props: KeyboardProps) => {\n  const {\n    keyPressing,\n    pressedKeys\n  } = props;\n  const keyMap: KeyMap = ansi104;\n  const unit = '60px';\n  const unitWidth = (value: number) => `calc(${value} * ${unit})`;\n\n  let maxKeyWidth = 0;\n  let currentRowWidth = 0;\n\n  useEffect(() => {\n    (document.getElementById('keyboard') as any).style.width = `calc(${maxKeyWidth} * ${unit})`\n  }, [maxKeyWidth]);\n\n  return (\n    <div id=\"keyboard\">\n      {\n        keyMap.map(row => {\n          if ( maxKeyWidth < currentRowWidth) {\n            maxKeyWidth = currentRowWidth;\n          }\n          currentRowWidth = 0;\n          return (\n            <div className=\"row\" style={{height: unit}}>\n              {\n                row.map(key => {\n                  const {\n                    w, h, x, legend, keyCode\n                  } = key;\n                  const keyWidth = w || 1;\n                  const keyHeight = h || 1;\n                  if (x) {\n                    currentRowWidth += x;\n                    return <div className=\"key-space\" style={{height: unit, width: unitWidth(x)}} />\n                  }\n\n                  if (legend && keyCode) {\n                    currentRowWidth += keyWidth;\n                    return (\n                      <div\n                        className={`key ${keyCode} ${pressedKeys.includes(keyCode) && 'pressed'} ${keyPressing === keyCode && 'pressing'}`}\n                        style={{\n                          height: unitWidth(keyHeight),\n                          width: unitWidth(keyWidth)\n                        }}\n                      >\n                        <div className=\"keyCap\">\n                          { legend.split('\\n').map(k => <p>{k}<br/></p>) }\n                        </div>\n                      </div>\n                    )\n                  }\n                })\n              }\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Keyboard\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./assets/scss/style.scss\";\nimport Keyboard from \"./components/keyboard\";\n\nconst App = () => {\n  const [keyPressing, setKeyPressing] = useState<string>('');\n  const [keyPress, setKeyPress] = useState<string>('');\n  const [pressedKeys, setPressedKeys] = useState<string[]>([]);\n\n  const pushPressedKeys = (e: KeyboardEvent) => {\n    const { code, key } = e;\n    setKeyPress(key);\n    if (!pressedKeys.includes(code)) {\n      setPressedKeys([...pressedKeys, code]);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', (e) => {\n      setKeyPressing(e.code);\n    });\n    document.addEventListener('keyup', () => {\n      setKeyPressing('');\n    });\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', pushPressedKeys);\n    return () => document.removeEventListener('keydown', pushPressedKeys);\n  }, [pressedKeys.length]);\n\n  return (\n    <div className=\"App\">\n      <h1>Keyboard tester</h1>\n      <h2>\n        Last key pressed: <span>{keyPress}</span>\n      </h2>\n      <Keyboard\n        keyPressing={keyPressing}\n        pressedKeys={pressedKeys}\n      />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}